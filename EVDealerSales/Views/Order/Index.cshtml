@using EVDealerSales.BO.DTOs.OrderDTOs
@model IEnumerable<ListOrderDto>

@{
    ViewData["Title"] = "Orders";
}

<style>
    .customer-group-card {
        background: #1a1a1a;
        border: 1px solid #2a2a2a;
        border-radius: 16px;
        overflow: hidden;
        transition: all 0.3s ease;
        height: 100%;
    }

        .customer-group-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(0, 112, 243, 0.15);
        }

    .customer-header {
        padding: 1.25rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: space-between;
        transition: background 0.2s ease;
    }

        .customer-header:hover {
            background: rgba(0, 112, 243, 0.05);
        }

        .customer-header.active {
            background: rgba(0, 112, 243, 0.08);
            border-bottom: 1px solid #2a2a2a;
        }

    .customer-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex: 1;
    }

    .customer-avatar {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        background: linear-gradient(135deg, #0070f3 0%, #00d4ff 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 1.125rem;
        color: #fff;
        flex-shrink: 0;
    }

    .customer-details h3 {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: #fff;
    }

    .customer-meta {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: 0.25rem;
    }

    .order-count {
        background: rgba(0, 112, 243, 0.15);
        color: #00d4ff;
        padding: 0.25rem 0.625rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        border: 1px solid rgba(0, 212, 255, 0.3);
    }

    .total-amount {
        color: #0a0;
        font-weight: 600;
        font-size: 0.875rem;
    }

    .chevron-icon {
        color: #666;
        transition: transform 0.3s ease, color 0.3s ease;
        font-size: 1.25rem;
    }

    .customer-header.active .chevron-icon {
        transform: rotate(180deg);
        color: #00d4ff;
    }

    .orders-list {
        padding: 0;
        display: none;
    }

        .orders-list.show {
            display: block;
        }

    .order-item {
        padding: 1rem 1.25rem;
        border-top: 1px solid #2a2a2a;
        transition: background 0.2s ease;
    }

        .order-item:hover {
            background: rgba(255, 255, 255, 0.02);
        }

    .order-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 0.75rem;
    }

    .vehicle-name {
        font-weight: 600;
        color: #fff;
        font-size: 1rem;
    }

    .order-meta {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 0.75rem;
        margin-bottom: 0.75rem;
    }

    .meta-item {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .meta-label {
        font-size: 0.75rem;
        color: #999;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .meta-value {
        font-size: 0.875rem;
        color: #fff;
        font-weight: 500;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.375rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        border: 1px solid;
    }

        .status-badge.pending {
            background: rgba(255, 193, 7, 0.1);
            color: #ffc107;
            border-color: rgba(255, 193, 7, 0.3);
        }

        .status-badge.confirmed {
            background: rgba(0, 112, 243, 0.1);
            color: #0070f3;
            border-color: rgba(0, 112, 243, 0.3);
        }

        .status-badge.completed {
            background: rgba(0, 170, 0, 0.1);
            color: #0a0;
            border-color: rgba(0, 170, 0, 0.3);
        }

        .status-badge.cancelled {
            background: rgba(238, 0, 0, 0.1);
            color: #e00;
            border-color: rgba(238, 0, 0, 0.3);
        }

    .status-dot {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background: currentColor;
    }

    .order-actions {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 500;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .action-btn-primary {
        background: rgba(0, 112, 243, 0.1);
        color: #0070f3;
        border: 1px solid #3a3a3a;
    }

        .action-btn-primary:hover {
            background: rgba(0, 112, 243, 0.2);
            border-color: #00d4ff;
            transform: translateY(-1px);
        }

    .action-btn-danger {
        background: rgba(238, 0, 0, 0.1);
        color: #e00;
        border: 1px solid rgba(238, 0, 0, 0.2);
    }

        .action-btn-danger:hover {
            background: rgba(238, 0, 0, 0.2);
            border-color: #e00;
            transform: translateY(-1px);
        }

    .search-bar {
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 8px;
        padding: 0.75rem 1rem;
        color: #fff;
        width: 100%;
        font-size: 0.9375rem;
        transition: all 0.2s ease;
    }

        .search-bar:focus {
            outline: none;
            border-color: #0070f3;
            background: rgba(255,255,255,0.05);
        }

    .create-btn {
        background: linear-gradient(135deg, #0070f3 0%, #00d4ff 100%);
        color: #fff;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
        border: none;
    }

        .create-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0, 112, 243, 0.3);
            color: #fff;
        }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #999;
    }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
</style>

<div class="container-fluid px-4 py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1" style="color: #fff; font-weight: 600;">Orders</h2>
            <p class="mb-0" style="color: #999; font-size: 0.9375rem;">Manage customer orders and transactions</p>
        </div>
        <a asp-action="Create" class="create-btn">
            <i class="fas fa-plus"></i>
            Create Order
        </a>
    </div>

    <div class="mb-4">
        <input type="text" id="searchInput" class="search-bar" placeholder="Search by customer, staff, or vehicle..." />
    </div>

    @if (!Model.Any())
    {
        <div class="empty-state">
            <i class="fas fa-shopping-cart"></i>
            <h4 style="color: #ccc;">No orders found</h4>
            <p>Create your first order to get started</p>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="ordersContainer">
            @foreach (var customerGroup in Model.GroupBy(o => o.CustomerName))
            {
                var totalAmount = customerGroup.Sum(o => o.TotalAmount);
                var firstOrder = customerGroup.First();
                var initials = string.Join("", customerGroup.Key.Split(' ').Select(n => n.FirstOrDefault())).ToUpper();

                <div class="col customer-group" data-customer="@customerGroup.Key.ToLower()">
                    <div class="customer-group-card">
                        <div class="customer-header" onclick="toggleCustomerGroup(this)">
                            <div class="customer-info">
                                <div class="customer-avatar">@initials</div>
                                <div class="customer-details">
                                    <h3>@customerGroup.Key</h3>
                                    <div class="customer-meta">
                                        <span class="order-count">@customerGroup.Count() @(customerGroup.Count() == 1 ? "Order" : "Orders")</span>
                                        <span class="total-amount">@totalAmount.ToString("C")</span>
                                    </div>
                                </div>
                            </div>
                            <i class="fas fa-chevron-down chevron-icon"></i>
                        </div>

                        <div class="orders-list">
                            @foreach (var order in customerGroup.OrderByDescending(o => o.OrderDate))
                            {
                                <div class="order-item" data-vehicle="@order.VehicleModel.ToLower()" data-staff="@order.StaffName.ToLower()">
                                    <div class="order-header">
                                        <span class="vehicle-name">@order.VehicleModel</span>
                                        <span class="status-badge @order.Status.ToString().ToLower()">
                                            <span class="status-dot"></span>
                                            @order.Status
                                        </span>
                                    </div>

                                    <div class="order-meta">
                                        <div class="meta-item">
                                            <span class="meta-label">Staff</span>
                                            <span class="meta-value">@order.StaffName</span>
                                        </div>
                                        <div class="meta-item">
                                            <span class="meta-label">Order Date</span>
                                            <span class="meta-value">@order.OrderDate.ToString("MMM dd, yyyy")</span>
                                        </div>
                                        <div class="meta-item">
                                            <span class="meta-label">Total</span>
                                            <span class="meta-value" style="color: #0a0;">$@order.TotalAmount.ToString("N0")</span>
                                        </div>

                                    </div>

                                    <div class="order-actions">
                                        <a asp-action="Detail" asp-route-id="@order.Id" class="action-btn action-btn-primary">
                                            <i class="fas fa-eye"></i> View
                                        </a>
                                        <form asp-action="Delete" asp-route-id="@order.Id" method="post" class="d-inline"
                                              onsubmit="return confirm('Are you sure you want to delete this order?');">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="action-btn action-btn-danger">
                                                <i class="fas fa-trash-alt"></i> Delete
                                            </button>
                                        </form>
                                    </div>

                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<script>
    function toggleCustomerGroup(header) {
        const card = header.closest('.customer-group-card');
        const ordersList = card.querySelector('.orders-list');
        const isActive = header.classList.contains('active');

        header.classList.toggle('active');
        ordersList.classList.toggle('show');
    }

    // Search functionality
    document.getElementById('searchInput').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const customerGroups = document.querySelectorAll('.customer-group');

        customerGroups.forEach(group => {
            const customerName = group.dataset.customer;
            const orders = group.querySelectorAll('.order-item');
            let hasVisibleOrders = false;

            orders.forEach(order => {
                const vehicle = order.dataset.vehicle;
                const staff = order.dataset.staff;
                const matches = customerName.includes(searchTerm) ||
                               vehicle.includes(searchTerm) ||
                               staff.includes(searchTerm);

                order.style.display = matches ? 'block' : 'none';
                if (matches) hasVisibleOrders = true;
            });

            const matchesCustomer = customerName.includes(searchTerm);
            group.style.display = (matchesCustomer || hasVisibleOrders) ? 'block' : 'none';

            // Auto-expand if searching
            if (searchTerm && hasVisibleOrders) {
                const header = group.querySelector('.customer-header');
                const ordersList = group.querySelector('.orders-list');
                header.classList.add('active');
                ordersList.classList.add('show');
            }
        });
    });
</script>
